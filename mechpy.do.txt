TITLE: mechpy
AUTHOR: neal gordon Email:nealagordon@gmail.com
DATE: today

a mechanical engineering toolbox

TOC: on

----------
!split

========= mechpy =========
label{chp:intro}

======= Introduction =======

Mechpy was created for few reasons.
 * To provide the practicing engineer with applications or boilerplate code to quickly replicate and solve real-world systems common in mechanical engineering
 * To give the engineering student a code base from which to supplement learning through hand-calculations and an easy way to check work.

There are many different tools available to engineers. Hand-calculations, spreadsheets, and code are all great ways to perform calculations or visualize data or concepts. MATLAB is the defacto tool to solve many engineering calculations, but is just too expensive to be a practical tool for many of us. Octave, Scilab, or Freelab are great alternatives, but is limited in scope to calculation. I began using python for calculations and visualizations and have found it to be a very powerful tool with many existing modules for mathematics and plotting, in addition to the thousands of other libraries for general computing.

To get the source code check out the "github project page":"https://github.com/nagordon/mechpy" <linebreak>
----------
!split

======= Modules =======
label{chp:modules}

__composites.__
(ref{sec:comp})
specialized code to analyze composite plates using classical laminated plate theory
URL:"https://nagordon.github.io/mechpy/composites.html"  <linebreak>

__design.__
(ref{sec:design})
shear-bending diagrams, assisting hand calculations for stress
URL:"https://nagordon.github.io/mechpy/design.html"  <linebreak>

__solids.__
(ref{sec:solids})
URL:"https://nagordon.github.io/mechpy/solids.html"  <linebreak>
URL:"https://nagordon.github.io/mechpy/testing.html"  <linebreak>

__fem.__
(ref{sec:fem})
example code for computing finite element models for analysis and education
URL:"https://nagordon.github.io/mechpy/fem.html"  <linebreak>

__math.__
(ref{sec:math})
various math tools for processing engineering systems
URL:"https://nagordon.github.io/mechpy/math.html"  <linebreak>

__statics.__
(ref{sec:statics})
code for assisting and checking hand calculations
URL:"https://nagordon.github.io/mechpy/statics.html"  <linebreak>

__units.__
(ref{sec:units})
unit conversion
URL:"https://nagordon.github.io/mechpy/units.html"  <linebreak>

__catia.__
(ref{sec:catia})
API code to automate cad in catia

__abaqus.__
(ref{sec:abaqus})
abaqus api interface written in python for automating abaqus fem simulations and reporting.

__dynamics.__
(ref{sec:dynamics})
URL:"https://nagordon.github.io/mechpy/dynamics.html"  <linebreak>

======= Installation =======

The easiest way to get mechpy is to download it directly from the "mechpy github repository":"https://github.com/nagordon/mechpy/archive/master.zip"

If you are comfortable using "git":"https://git-scm.com/downloads" feel free to clone mechpy with git

!bc bash
git clone https://github.com/nagordon/mechpy.git
!ec

Navigate to the `setup.py` file and run

!bc bash
python setup.py install
!ec

this should add the mechpy module to the python path

----------
!split


========= Python =========
label{chp:introtopython}


======= Introductory Tutorials =======
label{sec:introtut}

For a introduction to python for engineering computing, this is a slideshow for Getting Started with Python in Engineering <linebreak>
URL:"https://nagordon.github.io/mechpy/Getting_Started_with_Python_in_Engineering.deckslides.html"  <linebreak>

or if you prefer a webpage, follow the link below <linebreak>
URL:"https://nagordon.github.io/mechpy/Getting_Started_with_Python_in_Engineering.webpage.html"  <linebreak>

======= Engineering Tutorials =======
label{chp:mechtut}

Here you will find engineering tutorials on popular activities in engineering computing. The notebooks for these can also be found in mechpy/tutorials

## insert engineering tutorial here

======= Advanced Tutorials =======


===== Virtual Environments =====

Lets set up our virtual environments with conda. This will allow you to have an isolated environment for different projects. I typically default with the most recent version and create a 2.7 environment.

to check what environments are install type

!bc bash
conda info -e
!ec

To install a full version of python 2.7 with many packages, type

!bc bash
conda create -n py27 python=2.7 anaconda
!ec

In linux activate different environments by
!bc bash
source activate py27
source deactivate
!ec

and in windows
!bc batch
activate py27
deactivate
!ec


!split
===== Converting an ipython notebook to an html document =====
Ipython notebooks can eaily be converted to an html file with the following python code

!bc pycod
get_ipython().system('jupyter nbconvert --to html mechpy.ipynb')
!ec

or, in the OS terminal

!bc batch
jupyter nbconvert --to html mechpy.ipynb
!ec

===== Running jupyter notebook in windows =====
In windows, create a batch file (*.bat) to run a jupyter notebook server in the current directory
!bc batch
:: Use to launch jupyter notebooks
:: change console to the current working directory
Pushd "%~dp0"
:: launch jupyter notebook
jupyter notebook
:: write html output
jupyter nbconvert --to html mechpy.ipynb
pause
!ec



======= Excel and Python - They can be friends =======
Because it's there and everyone uses it
"Automate the boring stuff, python excel scripting":"https://automatetheboringstuff.com/chapter12/" <linebreak>
"Use python intsead of VBA with xlwings":"http://xlwings.org/" <linebreak>
"Or with pandas, use xlsxwriter":"http://xlsxwriter.readthedocs.io/index.html" <linebreak>
"openpyxl":"https://openpyxl.readthedocs.io/en/default/" <linebreak>
"or just develop directly with Windows COM":"http://shop.oreilly.com/product/9781565926219.do"

----------
!split

========= mechpy modules documentation =========

======= composites  =======
label{sec:comp}

specialized code to analyze composite plates using classical laminated plate theory


======= design  =======
label{sec:design}

shear-bending diagrams, assisting hand calculations for stress


======= fem  =======
label{sec:fem}

example code for computing finite element models for analysis and education


======= math  =======
label{sec:math}

various math tools for processing engineering systems


======= statics  =======
label{sec:statics}

code for assisting and checking hand calculations


======= units  =======
label{sec:units}

unit conversion

"sympy units":"http://docs.sympy.org/latest/modules/physics/units.html"


======= catia =======
label{sec:catia}

API code to automate cad in catia using wincom32 module

======= abaqus and abaqus_report =======
label{sec:abaqus}

API code to automate running of finite element models and reporting using python-pptx. Abaqus uses python as its native macro/scripting language, which makes it easy to develop powerful tools that utilize the robustness and simplicity of the python programming language.

===== abaqus documentation =====

Abaqus uses python as its native macro/scripting language, which makes it easy to develop powerful tools that utilize the robustness and simplicity of the python programming language.

This program was designed to generate a dynamic powerpoint presentation based on a user defined odb file. The `abaqus.py` requires and abaqus license and can be run from the abaqus python console within Abaqus CAE. The `abaqus_report.py` has many other modules that are not allowed in Abaqus python. PythonReportTool calls functions located in the AbaqusReportTool.py and can be run in any python console or windows terminal and can be executed by opening a windows command prompt by.

### Advanced operation
In the python console in Abaqus `>>>` , commands can be typed to use parts of *AbaqusReportTool*. To execute specific functions in *AbaqusReportTool*, type:
!bc pyshell
>>>import os
>>>os.chdir('C:/Users/User1/Directory_with_py_files')
>>>import AbaqusReportTool
>>>odbname='bottle_test/bottle_test.odb'  # odb file cannot have spaces in the name or special characters, just letters, numbers hyphens and underscores!
>>>myOdbTest = AbaqusReportTool.AbaqusReportTool(odbname)
!ec
When myOdbTest is loaded, a check is made to determine if the database needs updated, and does so if it does. Also, *>>>* indicates we are in the python console. and will be dropped henceforth

=== A few examples of how to run individual functions ===
!bc pycod
# to see all the functions available
dir(myOdbTest)
#['BE_makeReportData', 'BT_makeReportData', 'CBE_makeReportData', 'HS_makeReportData', 'TL_makeReportData', 'VP_edit', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'avi_save', 'clearFiles', 'clearFilesExcept', 'csv_field', 'csv_history', 'csysCyn', 'getMaxField', 'myAssembly', 'myOdb', 'myOdbDat', 'myOdbDat2', 'myOdbVis', 'myOdbs', 'myView', 'myVp', 'png_save', 'png_undeformed', 'replaceElementSets', 'replaceNodeSets', 'rpt_field', 'txt_field_summary', 'txt_history_summary', 'txt_odb_summary', 'xplot_field', 'xplot_history', 'xyList_field', 'xyplot_history']

# to change the viewport to default values of the function, s=0, f=0, o='', c='', csys = '', setsKeyword = '',v='Iso1',myLegend = ON, myState=OFF, myMaxValue = 0, myMinValue = 0)
myOdbTest.VP_edit()

# this code will change the current viewport to step 0,frame 0, object Stress, Component S11, coordinate system default, elementsets all, view Iso1, Legend on, State on, maxvalue auto minvalue auto
myOdbTest.VP_edit(s=0, f=0, o='S', c='S11', csys = '', setsKeyword = '',v='Iso1', myLegend = ON, myState=OFF, myMaxValue = 0, myMinValue = 0)

# to clear all files from the directory except odb and pptx where the odb file resides
myOdbTest.clearFilesExcept(['odb','pptx'])

# to create a text file that describes all the fields in the odb file
myOdbTest.txt_field_summary()

# saves a png of the current viewport
myOdbTest.png_save()
!ec

=== Accessing History Region info using the bottle_test example ===
!bc pycod
myOdbTest.myOdbDat.steps.keys()
# ['pressure']
myStep = myOdbTest.myOdbDat.steps['pressure']
myStep.historyRegions.keys()
# ['Node CATGSD_F_SHAMPOO_BOTTLE_END-1.58', 'Node CATGSD_F_SHAMPOO_BOTTLE_END-1.574']
myRegion=myStep.historyRegions['Node CATGSD_F_SHAMPOO_BOTTLE_END-1.58']
myRegion.historyOutputs.keys()
# ['RF1', 'RF2', 'RF3', 'U1', 'U2', 'U3']
myRegion.historyOutputs['RF1'].description
# 'Reaction force'
# returns a nested tuple of time and the RF1 data
myDat = myRegion.historyOutputs['RF1'].data
# inverts the tuple and unpacks myDat into time and myRF1
time, myRF1  = zip(*myDat)
!ec

=== Extracting Field info ===
!bc pycod
myFieldval = myStep.frames[-1].fieldOutputs['U'].values
myU1 = [myFieldval[k].data[0] for k in range(len(myFieldval))]
!ec

===  Closing the database. even though the database is read-only, it is good practice to close the database ===
!bc pycod
myOdbTest.myOdbDat.close()
!ec

=== Basic Checklist for generating an Abaqus simulation  ===
 o Parts
 o Materials
 o Sections
 o Section Assingments
 o Assembly(instances)
 o Steps (after Initial)
 o BCs (Boundary Conditions)
 o Loads
 o Mesh
 o Jobs

=== launch an abaqus program   ===
!bc batch
abaqus
abq6132se
abaqus doc
abaqus pde      # launches only PDE (python development environment) for abaqus
abaqus cae -pde # launches PDE and abaqus cae
abaqus cae      # launches abaqus cae
abaqus viewer   # launhces abaqus viewer
!ec

=== execute an existing script or open a file ===
!bc batch
abaqus python odb_to_txt.py test1.odb       # runs a abaqus python script with input 'test1.odb'
abaqus cae script=myscript.py               # launches cae and runs script
abaqus cae database=filename.cae            # opens an odb file in cae
abaqus viewer script=myscript.py            # launches viewer and executes script
abaqus viewer database=cantilever           # opens a odb file in the viewer
abaqus cae noGUI=myscript.py                # launches cae and runs script
abaqus viewer noGUI=myscript.py             # launches viewer and executes script
abaqus job=my_sample_job interactive        # executes *.inp file
abaqus job=my_sample_job cpus=8 interactive # executes *.inp file and utilizes 8 cpu cores
!ec

=== executing an abaqus python script passing in variables ===
!bc batch
abaqus cae noGUI=myscript.py -- variable1 variable2
!ec

=== fetch demos ===
!bc batch
abaqus fetch job=beamExample   # fetches the beamExample.py file
abaqus fetch job=gsi_frame_caemodel.py
abaqus cae script=gsi_frame_caemodel.py
!ec

=== Some of the abaqus file types  ===

files generated by created and analyzing a model
 * *rpy* -  replay file , all modeling operation commands executed during a session, are saved in this file
 * *cae* - model database, contains models and analysis jobs
 * *jnl* - journal python file, all commands necessary to recreate the most current save model database
 * *rec* - recover file contains commands to replicate the version of the model database in memory

files created when a job is submitted
 * *inp* - abaqus config file that is created when a job is submitted. contains all the information necessary to run a analysis
 * *odb* - output database containing results from completed simulation. Use the step module output request manager to choose variables are saved at what rate. viewed in the  viualiation module
 * *lck* - file that protects the odb file when it is current being written to
 * *res* - used to continue an anaylsis that stopped before it was complete. use the step module to specify which analysis steps should write restart information
 * *dat* - printed output from the anaylsis input file processor, as well as printed output of selected results written during the analysis.
 * *msg*  - contains diagnostic or informative messages about the progress of the solution. Control the output in the step module
 * *fil*  - contains selected results from the analysis in a neutral format. that can we read/written for third-party post processing
 * *rpt* - text file generated from probe data for user specific user requested information
 * *ods* - scratch output database file
 * *mdb* - database of the model
 * *sim* - binary file
 * *sta* - summary of job info
 * *lck* - a file that indicates that the odb file is open and cannot be edited if opened by another user

=== Outputs ===
* defaults set in the environment file
*  typical outputs
 * E - strain
 * PE - plastic strain
 * U - displacements and rotations
 * RF - reaction forces
 * CF - concentrated (applied) forces and moments
 * CSTRESS - contact stresses
 * CDISP - contact displacements
 * see Abaqus Scripting User's Guide 5.2 for more info accessing the database


=== Abaqus Scripting User's Guide - 5.2.2 ===
field output
* typically requested for the entire model, often only at selected elements
* used for creating contour, deformed shape, and symbol plots
* Can be used as a source for x-y plots, but history is better
* intended for infrequent requests for large portions of model  data, such as 3d mesh contour plots
* can specify output frequency or time intervals

!bc pycod
import odbAccess
session.odbs[name].steps[name].frames[i].fieldOutputs[name]
# or
sdat=session.odbs['customBeamExample/customBeamExample.odb'].steps['beamLoad'].frames[-1].fieldOutputs['S']
integrationPointData = sdat.getSubset(position=INTEGRATION_POINT)
invariantsData = sdat.validInvariants
!ec


Abaqus Scripting User's Guide - 9.3.2
Field output is intended for infrequent requests for a large portion of the model and can be used to generate contour plots, animations, symbol plots, and displaced shape plots in the Visualization module of Abaqus/CAE. You can also use field output to generate an X–Y data plot. Only complete sets of basic variables (for example, all the stress or strain components) can be requested as field output. Field output is composed of a “cloud of data values” (e.g., stress tensors at each integration point for all elements). Each data value has a location, type, and value. You use the regions defined in the model data, such as an element set, to access subsets of the field output data. Figure 9–3 shows the field output data object model within an output database.

history output
* requested for a small subset of the model
* typically requested at every increment during the anaylsis
* used to generate xy plots by step and time
* example -  the principal stress at a single node at the root of the beam

!bc pycod
import odbAccess
session.odbs[name].steps[name].historyRegions[name]
!ec

Abaqus Scripting User's Guide - 9.3.2
History output is output defined for a single point or for values calculated for a portion of the model as a whole, such as energy. History output is intended for relatively frequent output requests for small portions of the model and can be displayed in the form of X–Y data plots in the Visualization module of Abaqus/CAE. Individual variables (such as a particular stress component) can be requested.
Depending on the type of output expected, a HistoryRegion object can be defined for one of the following:
* a node
* an integration point
* a region
* the whole model

The output from all history requests that relate to a particular point or region is then collected in one HistoryRegion object. Figure 9–4 shows the history output data object model within an output database. In contrast to field output, which is associated with a frame, history output is associated with a step.

=== Common Abaqus activities ===

Access the help documentation by typing `abaqus doc` in console or
!bquote
Help -> Search and Browse Guides
!equote


execute a abaqus/python script
!bquote
File -> Run Script
!equote

record a abaqus/python macro, where files are stored in users home directory in `abaqusMacros.py`
!bquote
File -> Macro Manager
!equote

edit and execute a abaqus python script in using the provided python development environment (PDE)
!bquote
File -> Abaqus PDE...
!equote

set default working directory

plugins
!bquote
abaqus_plugins\reportGenerator\htmlReportGeneratorForm.py
!equote

Change font of legend
!bquote
Viewport -> Viewport Annotation Options -> Triad -> Set Font
!equote

=== Abaqus/Python Scripting ===

 Abaqus specific Python modules imports
* Module - Abaqus/CAE functionality
* assembly - The Assembly module
* datum - The Datum toolset
* interaction - The Interaction module
* job - The Job module
* load - The Load module
* material - Materials in the Property module
* mesh - The Mesh module
* part - The Part module
* partition - The Partition toolset
* section - Sections in the Property module
* sketch - The Sketch module
* step - The Step module
* visualization - The Visualization module
* xyPlot - The X–Y toolset

built in abaqus gui example
!bc pycod
from abaqus import getInput
from math import sqrt
number = float(getInput('Enter a number:'))
print sqrt(number)
!ec

!bc pycod
def printCurrentVp(picname = 'file1'):

    from abaqus import session, getInputs
    from abaqusConstants import PNG
    name = getInputs( (('File name:', ''),),
        'Print current viewport to PNG file')[0]
    vp = session.viewports[session.currentViewportName]
    session.printToFile(
        fileName=name, format=PNG, canvasObjects=(vp, ))
!ec


# viewport views
!bc pycod
viewVector    =(0,1,0)  #  x,y,z
cameraUpVector=(0,0,1)

myViewport.view.setValues(session.views['Front'])
myViewport.view.setViewpoint(viewVector=(0,0,1), cameraUpVector=(0,1,0))

myViewport.view.setValues(session.views['Back'])
myViewport.view.setViewpoint(viewVector=(0,0,-1), cameraUpVector=(0,1,0))

myViewport.view.setValues(session.views['Top'])
myViewport.view.setViewpoint(viewVector=(0,1,0), cameraUpVector=(0,0,-1))

myViewport.view.setValues(session.views['Bottom'])
myViewport.view.setViewpoint(viewVector=(0,-1,0), cameraUpVector=(0,0,1))

myViewport.view.setValues(session.views['Left'])
myViewport.view.setViewpoint(viewVector=(-1,0,0), cameraUpVector=(0,1,0))

myViewport.view.setValues(session.views['Right'])
myViewport.view.setViewpoint(viewVector=(1,0,0), cameraUpVector=(0,1,0))

myViewport.view.setValues(session.views['Iso'])
myViewport.view.setViewpoint(viewVector=(1,1,1), cameraUpVector=(0,1,0))

!ec

=== Other random tests from the documentation ===
!bc batch
abaqus fetch job=odbElementConnectivity
abaqus fetch job=viewer_tutorial
abaqus cae odbElementConnectivity.py -- viewer_tutorial.odb
!ec

This document was generated from content in the abaqus documentation as a quick reference guide when using abaqus. To access  this content

!bquote
Help -> Search and Browse` Guides...
!equote


End of *abaqus* documentation


----------
!split

=========  References =========
label{chp:ref}

Hibbler - Statics   <linebreak>
Hibbler - Mechanics of Materials  <linebreak>
Collins et al - Mechanical Design of Machine Elements and Machines  <linebreak>
Flabel - Practical Stress Analysis for Design Engineers  <linebreak>
Peery - Aircraft Structures  <linebreak>
Niu - Airframe Stress Analysis and Sizing <linebreak>

!split
======= Links =======


===== Python Online Engineering Classes =====
"scientific-python-lectures":"https://github.com/jrjohansson/scientific-python-lectures"  <linebreak>
"Practical Numerical Methods with Python":"http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about" with "source code":"https://github.com/numerical-mooc/numerical-mooc" <linebreak>
"Aerodynamics / Hydrodynamics with Python":"http://openedx.seas.gwu.edu/courses/GW/MAE6226/2014_spring/about" <linebreak>
"Cornell":"http://pages.physics.cornell.edu/~sethna/StatMech/ComputerExercises/PythonSoftware/"  <linebreak>
"Python numerical methods mooc":"http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about"  <linebreak>
"Computational Physics with Python":"http://www-personal.umich.edu/~mejn/computational-physics/" <linebreak>
"Coding the Matrix":"http://cs.brown.edu/courses/cs053/current/index.htm" <linebreak>

===== Python Engineering Books =====

"Numerical Python - A Practical Techniques Approach for Industry":"http://www.apress.com/9781484205549" with "source code":"http://www.apress.com/downloadable/download/sample/sample_id/1732/"  <linebreak>
"Elementary Mechanics Using Python":"http://www.springer.com/us/book/9783319195957#aboutBook"   <linebreak>
"A Primer on Scientific Programming With Python":"http://hplgit.github.io/primer.html/doc/web/index.html"  <linebreak>
"Coding the Matrix":"http://codingthematrix.com/" <linebreak>

===== Python Engineering Libraries =====

=== General Numeric Python ===
Python has mature scientific computation packages, namely "scipy":"https://www.scipy.org/"

__Scipy.__

"Scipy Cookbook":"http://scipy-cookbook.readthedocs.io/index.html"  <linebreak>
"Scipy Guide":"http://www.davekuhlman.org/scipy_guide_01.html"  <linebreak>
"Scipy Lectures":"http://www.scipy-lectures.org/index.html"   <linebreak>
"Learning Scipy":"https://github.com/rojassergio/Learning-Scipy"   <linebreak>
"Scipy Tutorial":"http://docs.scipy.org/doc/scipy/reference/tutorial/"   <linebreak>

__Numpy.__

"Numpy":"https://wiki.python.org/moin/NumericAndScientific"  <linebreak>
"Official Docs":"https://docs.scipy.org/doc/numpy-dev/contents.html"
"Numpy for matlab users":"https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html"  <linebreak>
"100 numpy examples":"https://github.com/rougier/numpy-100"  <linebreak>
"numpy on windows":"https://github.com/numpy/numpy/wiki/Numerical-software-on-Windows"  <linebreak>

__Sympy.__

"sympy tutorial":"http://docs.sympy.org/dev/tutorial/intro.html" <linebreak>
"sympy features":"http://www.sympy.org/en/features.html" <linebreak>
"sympy physics":"http://docs.sympy.org/dev/modules/physics/mechanics/" <linebreak>

__Matplotlib.__

"matplotlib gallery":"http://matplotlib.org/gallery.html" and "matplotlib tutorial":"https://github.com/rougier/matplotlib-tutorial"  <linebreak>
"interactive matplotlib":"http://central.scipy.org/item/84/1/simple-interactive-matplotlib-plots"  <linebreak>


=== Fluids/Aero ===
"aeropy":"http://aeropy.readthedocs.io/en/latest/"   <linebreak>
"NACA airfoils":"https://github.com/dgorissen/naca"   <linebreak>
"aeropython":"https://github.com/barbagroup/AeroPython"  or "aeropython":"http://lorenabarba.com/blog/announcing-aeropython/"  <linebreak>
"pyaero":"http://pyaero.sourceforge.net/"   <linebreak>

=== Mechanics/Composites/Materials ===
"pyply composites":"https://github.com/Rlee13/pyPLY  "   <linebreak>
"sympy classical mechanics":"http://docs.sympy.org/latest/modules/physics/mechanics/index.html"  <linebreak>
"pygear":"http://sourceforge.net/projects/pygear/"   <linebreak>
"AeroComBAT":"https://github.com/bennames/AeroComBAT-Project"
URL:"https://github.com/elainecraigie/MechanicsOfCompositesProject_ECraigie  "   <linebreak>

=== FEM / Math ===
"pynastran":"https://github.com/SteveDoyle2/pynastran/wiki/GUI"   <linebreak>
"grid solvers":"http://pyamg.org/" with "example":"https://code.google.com/p/pyamg/wiki/Examples"   <linebreak>
"ode solver":"http://hplgit.github.io/odespy/doc/web/index.html  "   <linebreak>
"differential equations demo":"http://arachnoid.com/IPython/differential_equations.html"   <linebreak>
"DiffyQ":"http://www.usna.edu/Users/math/wdj/_files/documents/teach/sm212/DiffyQ/des-book-2009-11-24.pdf"   <linebreak>
"pycalculix":"http://justinablack.com/pycalculix/"  <linebreak>
"FEniCS tutorial":"http://fenicsproject.org/documentation/tutorial/"   <linebreak>
"SfePy-Simple Finite Elements in Python":"http://sfepy.org/doc-devel/index.html"   <linebreak>
"PyODE":"http://pyode.sourceforge.net/tutorials/tutorial2.html"  <linebreak>
"getfem++":"http://download.gna.org/getfem/html/homepage/"   <linebreak>
"pycalculix":"http://justinablack.com/pycalculix/"   <linebreak>
"Pysimulator":"https://github.com/PySimulator/PySimulator/"   <linebreak>
"pyfem":"http://compmech.lab.asu.edu/data/pyfem.py "  <linebreak>


=== Units ===
"pint units":"http://pint.readthedocs.io/en/0.7.2/"    <linebreak>
"Unum units":"https://pypi.python.org/pypi/Unum" <linebreak>
"quantities":"https://github.com/python-quantities/python-quantities"
"scipy units":"http://docs.sympy.org/latest/modules/physics/units.html"   <linebreak>

=== Dynamics and Control Systems ===
"pyndamics":"https://github.com/bblais/pyndamics"   <linebreak>
"Python for Controls, System Dynamics, and Mechatronics":"http://www.siue.edu/~rkrauss/python_intro.html  "  <linebreak>
"python-control":"https://www.cds.caltech.edu/~murray/wiki/Control_Systems_Library_for_Python  "  <linebreak>
"vibrationdata":"http://www.vibrationdata.com/python/  "  <linebreak>
"CoupledSpringMassSystem":"http://scipy-cookbook.readthedocs.io/"  <linebreak>
"PyDSTool":"http://www.ni.gsu.edu/~rclewley/PyDSTool/FrontPage.html  "   <linebreak>
"python control":"https://github.com/python-control/python-control"   <linebreak>
"pydy":"http://www.pydy.org/" with "examples":"http://nbviewer.jupyter.org/github/pydy/pydy-tutorial-human-standing/tree/online-read/notebooks/"  and "here":"https://github.com/pydy/scipy-2013-mechanics"  <linebreak>

=== Plotting and Visualization ===
"bumpy":"http://hplgit.github.io/bumpy/doc/pub/._bumpy010.html#app:resources   "  <linebreak>
"pygame physics":"http://www.petercollingridge.co.uk/pygame-physics-simulation"  <linebreak>
"Pymunk visualization":"http://www.pymunk.org/en/latest/readme.html" and "here":"http://chipmunk-physics.net/" <linebreak>
"vpython":"http://vpython.org/"  <linebreak>


------------
Neal Gordon, 2016 <linebreak>
Developed using "doconce":"http://hplgit.github.io/doconce/doc/web/" with the "bootstrap theme":"http://getbootstrap.com/" and "github hosting":"https://github.com/"
